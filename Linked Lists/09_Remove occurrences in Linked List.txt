Remove occurrences in Linked List
Easy
30 / 30
Given a linked list and a key, remove all occurrences of the key from the Linked List. Return the head of the resultant list.

Example
Linked List: 1→2→3→2→4→7→2
Key: 2
After removal: 1→3→4→7
Testing
Input Format
The first line contains ‘T’ denoting the number of independent test cases.

For each test case the input has three lines:

A number ‘n’, denoting the length of the linked list.
n space-separated integers denoting elements of the linked list.
A number ‘key’ denoting the key to be deleted.
Output Format
For each test case, the output has one line with space-separated integers denoting the elements of the resultant linked list.

Sample Input
2
7
1 2 3 2 4 7 2
2
3
4 5 6
8
Expected Output
1 3 4 7
4 5 6
Constraints
1 <= T <= 100

0 <= n <= 104

1 <= element <= 1000

1 <= key <= 1000

"""
This is the ListNode class definition

class ListNode:
	def __init__(self, data=0, next=None):
		self.data = data
		self.next = next

"""


class Solution:
	def removeOccurences(self, head: ListNode, key: int) -> ListNode:
		# add your logic here
		
		
		# handling the keys if present in the first position
		while head:
			if head.data == key:
				head = head.next
			else: break
		
		currentHead = head
		
		# 3 2 2 
		while currentHead is not None and currentHead.next is not None:
			if currentHead.next.data == key:
				currentHead.next = currentHead.next.next
			else:
				currentHead = currentHead.next
		
		
		return head
		
# 		# Check if the LAST Element is having key for tc 1 2 2 
# 		if head is not None and prevHead.data == 2:
# 			tempHead = head
# 			while tempHead:
# 				if tempHead.next == prevHead: break
# 				tempHead = tempHead.next
# 			tempHead.next = None
				
		


