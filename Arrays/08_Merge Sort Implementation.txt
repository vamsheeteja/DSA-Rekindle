Implement Merge Sort
Easy
30 / 30
Given an array, sort it using merge sort.

Testing
Input Format
The first line contains 'T' denoting the no. of test cases.

Next T lines each contain a number 'n' denoting the number of elements, followed by n space-separated numbers denoting the array elements.

Output Format
T lines contain n numbers denoting the sorted array.

Sample Input
2
5 4 2 5 3 1
3 11 4 200
Expected Output
1 2 3 4 5
4 11 200
Constraints
0 <= T <= 100

1 <= N <= 5000

1 <= array element <= 106

Solution

class Solution:
	
	here used inplace kind of approach. IMP to remember that the array gets update inside the function (subfunction call) context.
	Better approach is outplace. 
		
	def mergeSort(self, arr: List[int]) -> List[int]:
		# add your logic here
		
		if(len(arr) > 1):
			
			mid = len(arr) // 2
			
			left_sbarr = arr[:mid]
			right_sbarr = arr[mid:]
			
			self.mergeSort(left_sbarr)
			self.mergeSort(right_sbarr)
			
			#merging the subarrays in sorted order
			
			i = j = k = 0
			
			while(i < len(left_sbarr) and j < len(right_sbarr)):
				if left_sbarr[i] <= right_sbarr[j]:
					arr[k] = left_sbarr[i]
					i += 1
				else:
					arr[k] = right_sbarr[j]
					j += 1
				k += 1
			
			# adding the remaining element if left in any one of the L and R..
			while(i < len(left_sbarr)):
				arr[k] = left_sbarr[i]
				i += 1
				k += 1
			while(j < len(right_sbarr)):
				arr[k] = right_sbarr[j]
				j += 1
				k += 1
			return arr
		return arr
		